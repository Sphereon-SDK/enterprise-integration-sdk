/**
 * Enterprise Integration API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.2.3
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['EIP/ApiClient', 'EIP/model/DocumentDetails', 'EIP/model/DocumentPayload', 'EIP/model/Error', 'EIP/model/ErrorResponse', 'EIP/model/IngestionResponse', 'EIP/model/StreamLocation', 'EIP/api/AllApi', 'EIP/api/IngestionApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/DocumentDetails'), require('./model/DocumentPayload'), require('./model/Error'), require('./model/ErrorResponse'), require('./model/IngestionResponse'), require('./model/StreamLocation'), require('./api/AllApi'), require('./api/IngestionApi'));
  }
}(function(ApiClient, DocumentDetails, DocumentPayload, Error, ErrorResponse, IngestionResponse, StreamLocation, AllApi, IngestionApi) {
  'use strict';

  /**
   * ERROR_UNKNOWN.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var EnterpriseIntegrationApi = require('EIP/index'); // See note below*.
   * var xxxSvc = new EnterpriseIntegrationApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new EnterpriseIntegrationApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['EIP/index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new EnterpriseIntegrationApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new EnterpriseIntegrationApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module EIP/index
   * @version 0.1
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:EIP/ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The DocumentDetails model constructor.
     * @property {module:EIP/model/DocumentDetails}
     */
    DocumentDetails: DocumentDetails,
    /**
     * The DocumentPayload model constructor.
     * @property {module:EIP/model/DocumentPayload}
     */
    DocumentPayload: DocumentPayload,
    /**
     * The Error model constructor.
     * @property {module:EIP/model/Error}
     */
    Error: Error,
    /**
     * The ErrorResponse model constructor.
     * @property {module:EIP/model/ErrorResponse}
     */
    ErrorResponse: ErrorResponse,
    /**
     * The IngestionResponse model constructor.
     * @property {module:EIP/model/IngestionResponse}
     */
    IngestionResponse: IngestionResponse,
    /**
     * The StreamLocation model constructor.
     * @property {module:EIP/model/StreamLocation}
     */
    StreamLocation: StreamLocation,
    /**
     * The AllApi service constructor.
     * @property {module:EIP/api/AllApi}
     */
    AllApi: AllApi,
    /**
     * The IngestionApi service constructor.
     * @property {module:EIP/api/IngestionApi}
     */
    IngestionApi: IngestionApi
  };

  return exports;
}));
