/*
 * Enterprise Integration API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 0.1
 * Contact: dev@sphereon.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package com.sphereon.sdk.eip.api;

import com.sphereon.sdk.eip.handler.ApiCallback;
import com.sphereon.sdk.eip.handler.ApiClient;
import com.sphereon.sdk.eip.handler.ApiException;
import com.sphereon.sdk.eip.handler.ApiResponse;
import com.sphereon.sdk.eip.handler.Configuration;
import com.sphereon.sdk.eip.handler.Pair;
import com.sphereon.sdk.eip.handler.ProgressRequestBody;
import com.sphereon.sdk.eip.handler.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.sphereon.sdk.eip.model.DocumentPayload;
import com.sphereon.sdk.eip.model.ErrorResponse;
import java.io.File;
import com.sphereon.sdk.eip.model.IngestionResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class IngestionApi {
    private ApiClient apiClient;

    public IngestionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public IngestionApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getDocumentStatus
     * @param documentId documentId (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDocumentStatusCall(String documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/integration/0.1/ingestion/{documentId}"
            .replaceAll("\\{" + "documentId" + "\\}", apiClient.escapeString(documentId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDocumentStatusValidateBeforeCall(String documentId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'documentId' is set
        if (documentId == null) {
            throw new ApiException("Missing the required parameter 'documentId' when calling getDocumentStatus(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getDocumentStatusCall(documentId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Get the status of the given document id
     * 
     * @param documentId documentId (required)
     * @return IngestionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IngestionResponse getDocumentStatus(String documentId) throws ApiException {
        ApiResponse<IngestionResponse> resp = getDocumentStatusWithHttpInfo(documentId);
        return resp.getData();
    }

    /**
     * Get the status of the given document id
     * 
     * @param documentId documentId (required)
     * @return ApiResponse&lt;IngestionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IngestionResponse> getDocumentStatusWithHttpInfo(String documentId) throws ApiException {
        com.squareup.okhttp.Call call = getDocumentStatusValidateBeforeCall(documentId, null, null);
        Type localVarReturnType = new TypeToken<IngestionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get the status of the given document id (asynchronously)
     * 
     * @param documentId documentId (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDocumentStatusAsync(String documentId, final ApiCallback<IngestionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDocumentStatusValidateBeforeCall(documentId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IngestionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for receiveDocument
     * @param channelName channelName (required)
     * @param documentPayload documentPayload (required)
     * @param documentType documentType (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call receiveDocumentCall(String channelName, DocumentPayload documentPayload, String documentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = documentPayload;
        
        // create path and map variables
        String localVarPath = "/integration/0.1/ingestion/{channelName}"
            .replaceAll("\\{" + "channelName" + "\\}", apiClient.escapeString(channelName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (documentType != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "documentType", documentType));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json;charset=UTF-8"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call receiveDocumentValidateBeforeCall(String channelName, DocumentPayload documentPayload, String documentType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'channelName' is set
        if (channelName == null) {
            throw new ApiException("Missing the required parameter 'channelName' when calling receiveDocument(Async)");
        }
        
        // verify the required parameter 'documentPayload' is set
        if (documentPayload == null) {
            throw new ApiException("Missing the required parameter 'documentPayload' when calling receiveDocument(Async)");
        }
        
        
        com.squareup.okhttp.Call call = receiveDocumentCall(channelName, documentPayload, documentType, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Push document to the ingestion queue
     * 
     * @param channelName channelName (required)
     * @param documentPayload documentPayload (required)
     * @param documentType documentType (optional)
     * @return IngestionResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public IngestionResponse receiveDocument(String channelName, DocumentPayload documentPayload, String documentType) throws ApiException {
        ApiResponse<IngestionResponse> resp = receiveDocumentWithHttpInfo(channelName, documentPayload, documentType);
        return resp.getData();
    }

    /**
     * Push document to the ingestion queue
     * 
     * @param channelName channelName (required)
     * @param documentPayload documentPayload (required)
     * @param documentType documentType (optional)
     * @return ApiResponse&lt;IngestionResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<IngestionResponse> receiveDocumentWithHttpInfo(String channelName, DocumentPayload documentPayload, String documentType) throws ApiException {
        com.squareup.okhttp.Call call = receiveDocumentValidateBeforeCall(channelName, documentPayload, documentType, null, null);
        Type localVarReturnType = new TypeToken<IngestionResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Push document to the ingestion queue (asynchronously)
     * 
     * @param channelName channelName (required)
     * @param documentPayload documentPayload (required)
     * @param documentType documentType (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call receiveDocumentAsync(String channelName, DocumentPayload documentPayload, String documentType, final ApiCallback<IngestionResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = receiveDocumentValidateBeforeCall(channelName, documentPayload, documentType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<IngestionResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for uploadInputFile
     * @param stream The document data to be ingested (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call uploadInputFileCall(File stream, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/integration/0.1/ingestion/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (stream != null)
        localVarFormParams.put("stream", stream);

        final String[] localVarAccepts = {
            "application/json;charset=UTF-8"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call uploadInputFileValidateBeforeCall(File stream, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'stream' is set
        if (stream == null) {
            throw new ApiException("Missing the required parameter 'stream' when calling uploadInputFile(Async)");
        }
        
        
        com.squareup.okhttp.Call call = uploadInputFileCall(stream, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Upload a file
     * Upload an input image. Classification will not be started yet.
     * @param stream The document data to be ingested (required)
     * @return DocumentPayload
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DocumentPayload uploadInputFile(File stream) throws ApiException {
        ApiResponse<DocumentPayload> resp = uploadInputFileWithHttpInfo(stream);
        return resp.getData();
    }

    /**
     * Upload a file
     * Upload an input image. Classification will not be started yet.
     * @param stream The document data to be ingested (required)
     * @return ApiResponse&lt;DocumentPayload&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DocumentPayload> uploadInputFileWithHttpInfo(File stream) throws ApiException {
        com.squareup.okhttp.Call call = uploadInputFileValidateBeforeCall(stream, null, null);
        Type localVarReturnType = new TypeToken<DocumentPayload>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Upload a file (asynchronously)
     * Upload an input image. Classification will not be started yet.
     * @param stream The document data to be ingested (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call uploadInputFileAsync(File stream, final ApiCallback<DocumentPayload> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = uploadInputFileValidateBeforeCall(stream, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DocumentPayload>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
